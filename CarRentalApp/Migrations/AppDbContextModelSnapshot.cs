// <auto-generated />
using System;
using CarRentalApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRentalApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarRentalApp.Models.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("BranchNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branchnameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BranchId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("CarRentalApp.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"));

                    b.Property<DateOnly?>("BDCheckNumber")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("BDFormNumber")
                        .HasColumnType("date");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("CarName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CartNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChassisNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ColourId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("EDCheckNumber")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EDFormNumber")
                        .HasColumnType("date");

                    b.Property<string>("FormNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufactorerId")
                        .HasColumnType("int");

                    b.Property<int>("ModeelId")
                        .HasColumnType("int");

                    b.Property<string>("PlateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Yearfmanufacture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("classificationId")
                        .HasColumnType("int");

                    b.HasKey("CarId");

                    b.HasIndex("BranchId");

                    b.HasIndex("ColourId");

                    b.HasIndex("ManufactorerId");

                    b.HasIndex("ModeelId");

                    b.HasIndex("classificationId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarRentalApp.Models.Classification", b =>
                {
                    b.Property<int>("classificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("classificationId"));

                    b.Property<string>("classificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("classificationId");

                    b.ToTable("Classifications");
                });

            modelBuilder.Entity("CarRentalApp.Models.Colour", b =>
                {
                    b.Property<int>("ColourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColourId"));

                    b.Property<string>("ColourNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColourNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ColourId");

                    b.ToTable("Colour");
                });

            modelBuilder.Entity("CarRentalApp.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companys");
                });

            modelBuilder.Entity("CarRentalApp.Models.Insurance", b =>
                {
                    b.Property<int>("InsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceId"));

                    b.Property<DateOnly>("BDPolicyNumber")
                        .HasColumnType("date");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EDPolicyNumber")
                        .HasColumnType("date");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InsuranceId");

                    b.ToTable("Insurances");
                });

            modelBuilder.Entity("CarRentalApp.Models.Manufactorer", b =>
                {
                    b.Property<int>("ManufactorerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManufactorerId"));

                    b.Property<string>("ManufactorNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManufactorNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManufactorerId");

                    b.ToTable("Manufactorers");
                });

            modelBuilder.Entity("CarRentalApp.Models.Modeel", b =>
                {
                    b.Property<int>("ModeelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModeelId"));

                    b.Property<int>("ManufactorerId")
                        .HasColumnType("int");

                    b.Property<string>("ModeelNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModeelNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModeelId");

                    b.HasIndex("ManufactorerId");

                    b.ToTable("Modeels");
                });

            modelBuilder.Entity("CarRentalApp.ViewModels.InsuranceViewModel", b =>
                {
                    b.Property<DateOnly>("BDPolicyNumber")
                        .HasColumnType("date");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EDPolicyNumber")
                        .HasColumnType("date");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyId");

                    b.ToTable("InsuranceViewModel");
                });

            modelBuilder.Entity("CarRentalApp.Models.Car", b =>
                {
                    b.HasOne("CarRentalApp.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalApp.Models.Colour", "Colours")
                        .WithMany()
                        .HasForeignKey("ColourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalApp.Models.Manufactorer", "Manufactorer")
                        .WithMany("Cars")
                        .HasForeignKey("ManufactorerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalApp.Models.Modeel", "Modeel")
                        .WithMany("Cars")
                        .HasForeignKey("ModeelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarRentalApp.Models.Classification", "Classification")
                        .WithMany()
                        .HasForeignKey("classificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Classification");

                    b.Navigation("Colours");

                    b.Navigation("Manufactorer");

                    b.Navigation("Modeel");
                });

            modelBuilder.Entity("CarRentalApp.Models.Modeel", b =>
                {
                    b.HasOne("CarRentalApp.Models.Manufactorer", "Manufactorer")
                        .WithMany()
                        .HasForeignKey("ManufactorerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufactorer");
                });

            modelBuilder.Entity("CarRentalApp.ViewModels.InsuranceViewModel", b =>
                {
                    b.HasOne("CarRentalApp.Models.Company", "company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");
                });

            modelBuilder.Entity("CarRentalApp.Models.Manufactorer", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentalApp.Models.Modeel", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
